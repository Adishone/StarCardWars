/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.9.4.0 (NJsonSchema v10.3.1.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface ICrewMemberFightClient {
    getCrewMembersFightResult(fightProperty: string | null | undefined): Observable<CrewMembersFightResult>;
}

@Injectable({
    providedIn: 'root'
})
export class CrewMemberFightClient implements ICrewMemberFightClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getCrewMembersFightResult(fightProperty: string | null | undefined): Observable<CrewMembersFightResult> {
        let url_ = this.baseUrl + "/api/CrewMemberFight?";
        if (fightProperty !== undefined && fightProperty !== null)
            url_ += "fightProperty=" + encodeURIComponent("" + fightProperty) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCrewMembersFightResult(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCrewMembersFightResult(<any>response_);
                } catch (e) {
                    return <Observable<CrewMembersFightResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<CrewMembersFightResult>><any>_observableThrow(response_);
        }));
    }

    protected processGetCrewMembersFightResult(response: HttpResponseBase): Observable<CrewMembersFightResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CrewMembersFightResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CrewMembersFightResult>(<any>null);
    }
}

export interface IScoreClient {
    getScore(): Observable<Score>;
}

@Injectable({
    providedIn: 'root'
})
export class ScoreClient implements IScoreClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getScore(): Observable<Score> {
        let url_ = this.baseUrl + "/api/Score";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetScore(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetScore(<any>response_);
                } catch (e) {
                    return <Observable<Score>><any>_observableThrow(e);
                }
            } else
                return <Observable<Score>><any>_observableThrow(response_);
        }));
    }

    protected processGetScore(response: HttpResponseBase): Observable<Score> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Score.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Score>(<any>null);
    }
}

export interface IStarshipFightClient {
    getStarshipFightResult(fightProperty: string | null | undefined): Observable<StarshipsFightResult>;
}

@Injectable({
    providedIn: 'root'
})
export class StarshipFightClient implements IStarshipFightClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getStarshipFightResult(fightProperty: string | null | undefined): Observable<StarshipsFightResult> {
        let url_ = this.baseUrl + "/api/StarshipFight?";
        if (fightProperty !== undefined && fightProperty !== null)
            url_ += "FightProperty=" + encodeURIComponent("" + fightProperty) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetStarshipFightResult(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetStarshipFightResult(<any>response_);
                } catch (e) {
                    return <Observable<StarshipsFightResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<StarshipsFightResult>><any>_observableThrow(response_);
        }));
    }

    protected processGetStarshipFightResult(response: HttpResponseBase): Observable<StarshipsFightResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StarshipsFightResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<StarshipsFightResult>(<any>null);
    }
}

export class CrewMembersFightResult implements ICrewMembersFightResult {
    firstPlayerCrewMember?: CrewMemberDto | undefined;
    secondPlayerCrewMember?: CrewMemberDto | undefined;
    fightProperty?: string | undefined;
    firstPlayerOverallScore?: number;
    secondPlayerOverallScore?: number;
    isDraw?: boolean;

    constructor(data?: ICrewMembersFightResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstPlayerCrewMember = _data["firstPlayerCrewMember"] ? CrewMemberDto.fromJS(_data["firstPlayerCrewMember"]) : <any>undefined;
            this.secondPlayerCrewMember = _data["secondPlayerCrewMember"] ? CrewMemberDto.fromJS(_data["secondPlayerCrewMember"]) : <any>undefined;
            this.fightProperty = _data["fightProperty"];
            this.firstPlayerOverallScore = _data["firstPlayerOverallScore"];
            this.secondPlayerOverallScore = _data["secondPlayerOverallScore"];
            this.isDraw = _data["isDraw"];
        }
    }

    static fromJS(data: any): CrewMembersFightResult {
        data = typeof data === 'object' ? data : {};
        let result = new CrewMembersFightResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstPlayerCrewMember"] = this.firstPlayerCrewMember ? this.firstPlayerCrewMember.toJSON() : <any>undefined;
        data["secondPlayerCrewMember"] = this.secondPlayerCrewMember ? this.secondPlayerCrewMember.toJSON() : <any>undefined;
        data["fightProperty"] = this.fightProperty;
        data["firstPlayerOverallScore"] = this.firstPlayerOverallScore;
        data["secondPlayerOverallScore"] = this.secondPlayerOverallScore;
        data["isDraw"] = this.isDraw;
        return data; 
    }
}

export interface ICrewMembersFightResult {
    firstPlayerCrewMember?: CrewMemberDto | undefined;
    secondPlayerCrewMember?: CrewMemberDto | undefined;
    fightProperty?: string | undefined;
    firstPlayerOverallScore?: number;
    secondPlayerOverallScore?: number;
    isDraw?: boolean;
}

export class CrewMemberDto implements ICrewMemberDto {
    id?: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    strength?: number;
    agility?: number;
    intellect?: number;
    starshipId?: number;
    imagePath?: string | undefined;
    starship?: Starship | undefined;
    isWinner?: boolean;

    constructor(data?: ICrewMemberDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.strength = _data["strength"];
            this.agility = _data["agility"];
            this.intellect = _data["intellect"];
            this.starshipId = _data["starshipId"];
            this.imagePath = _data["imagePath"];
            this.starship = _data["starship"] ? Starship.fromJS(_data["starship"]) : <any>undefined;
            this.isWinner = _data["isWinner"];
        }
    }

    static fromJS(data: any): CrewMemberDto {
        data = typeof data === 'object' ? data : {};
        let result = new CrewMemberDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["strength"] = this.strength;
        data["agility"] = this.agility;
        data["intellect"] = this.intellect;
        data["starshipId"] = this.starshipId;
        data["imagePath"] = this.imagePath;
        data["starship"] = this.starship ? this.starship.toJSON() : <any>undefined;
        data["isWinner"] = this.isWinner;
        return data; 
    }
}

export interface ICrewMemberDto {
    id?: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    strength?: number;
    agility?: number;
    intellect?: number;
    starshipId?: number;
    imagePath?: string | undefined;
    starship?: Starship | undefined;
    isWinner?: boolean;
}

export class Starship implements IStarship {
    id?: number;
    name?: string | undefined;
    mass?: number;
    imagePath?: string | undefined;
    crewMembers?: CrewMember[] | undefined;

    constructor(data?: IStarship) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.mass = _data["mass"];
            this.imagePath = _data["imagePath"];
            if (Array.isArray(_data["crewMembers"])) {
                this.crewMembers = [] as any;
                for (let item of _data["crewMembers"])
                    this.crewMembers!.push(CrewMember.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Starship {
        data = typeof data === 'object' ? data : {};
        let result = new Starship();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["mass"] = this.mass;
        data["imagePath"] = this.imagePath;
        if (Array.isArray(this.crewMembers)) {
            data["crewMembers"] = [];
            for (let item of this.crewMembers)
                data["crewMembers"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IStarship {
    id?: number;
    name?: string | undefined;
    mass?: number;
    imagePath?: string | undefined;
    crewMembers?: CrewMember[] | undefined;
}

export class CrewMember implements ICrewMember {
    id?: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    strength?: number;
    agility?: number;
    intellect?: number;
    starshipId?: number;
    imagePath?: string | undefined;
    starship?: Starship | undefined;

    constructor(data?: ICrewMember) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.strength = _data["strength"];
            this.agility = _data["agility"];
            this.intellect = _data["intellect"];
            this.starshipId = _data["starshipId"];
            this.imagePath = _data["imagePath"];
            this.starship = _data["starship"] ? Starship.fromJS(_data["starship"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CrewMember {
        data = typeof data === 'object' ? data : {};
        let result = new CrewMember();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["strength"] = this.strength;
        data["agility"] = this.agility;
        data["intellect"] = this.intellect;
        data["starshipId"] = this.starshipId;
        data["imagePath"] = this.imagePath;
        data["starship"] = this.starship ? this.starship.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ICrewMember {
    id?: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    strength?: number;
    agility?: number;
    intellect?: number;
    starshipId?: number;
    imagePath?: string | undefined;
    starship?: Starship | undefined;
}

export class Score implements IScore {
    id?: number;
    firstPlayerWins?: number;
    secondPlayerWins?: number;

    constructor(data?: IScore) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstPlayerWins = _data["firstPlayerWins"];
            this.secondPlayerWins = _data["secondPlayerWins"];
        }
    }

    static fromJS(data: any): Score {
        data = typeof data === 'object' ? data : {};
        let result = new Score();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstPlayerWins"] = this.firstPlayerWins;
        data["secondPlayerWins"] = this.secondPlayerWins;
        return data; 
    }
}

export interface IScore {
    id?: number;
    firstPlayerWins?: number;
    secondPlayerWins?: number;
}

export class StarshipsFightResult implements IStarshipsFightResult {
    firstPlayeStarship?: StarshipDto | undefined;
    secondPlayeStarship?: StarshipDto | undefined;
    fightProperty?: string | undefined;
    firstPlayerOverallScore?: number;
    secondPlayerOverallScore?: number;
    isDraw?: boolean;

    constructor(data?: IStarshipsFightResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstPlayeStarship = _data["firstPlayeStarship"] ? StarshipDto.fromJS(_data["firstPlayeStarship"]) : <any>undefined;
            this.secondPlayeStarship = _data["secondPlayeStarship"] ? StarshipDto.fromJS(_data["secondPlayeStarship"]) : <any>undefined;
            this.fightProperty = _data["fightProperty"];
            this.firstPlayerOverallScore = _data["firstPlayerOverallScore"];
            this.secondPlayerOverallScore = _data["secondPlayerOverallScore"];
            this.isDraw = _data["isDraw"];
        }
    }

    static fromJS(data: any): StarshipsFightResult {
        data = typeof data === 'object' ? data : {};
        let result = new StarshipsFightResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstPlayeStarship"] = this.firstPlayeStarship ? this.firstPlayeStarship.toJSON() : <any>undefined;
        data["secondPlayeStarship"] = this.secondPlayeStarship ? this.secondPlayeStarship.toJSON() : <any>undefined;
        data["fightProperty"] = this.fightProperty;
        data["firstPlayerOverallScore"] = this.firstPlayerOverallScore;
        data["secondPlayerOverallScore"] = this.secondPlayerOverallScore;
        data["isDraw"] = this.isDraw;
        return data; 
    }
}

export interface IStarshipsFightResult {
    firstPlayeStarship?: StarshipDto | undefined;
    secondPlayeStarship?: StarshipDto | undefined;
    fightProperty?: string | undefined;
    firstPlayerOverallScore?: number;
    secondPlayerOverallScore?: number;
    isDraw?: boolean;
}

export class StarshipDto implements IStarshipDto {
    id?: number;
    name?: string | undefined;
    mass?: number;
    imagePath?: string | undefined;
    isWinner?: boolean;
    numberOfCrewMembers?: number;

    constructor(data?: IStarshipDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.mass = _data["mass"];
            this.imagePath = _data["imagePath"];
            this.isWinner = _data["isWinner"];
            this.numberOfCrewMembers = _data["numberOfCrewMembers"];
        }
    }

    static fromJS(data: any): StarshipDto {
        data = typeof data === 'object' ? data : {};
        let result = new StarshipDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["mass"] = this.mass;
        data["imagePath"] = this.imagePath;
        data["isWinner"] = this.isWinner;
        data["numberOfCrewMembers"] = this.numberOfCrewMembers;
        return data; 
    }
}

export interface IStarshipDto {
    id?: number;
    name?: string | undefined;
    mass?: number;
    imagePath?: string | undefined;
    isWinner?: boolean;
    numberOfCrewMembers?: number;
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}